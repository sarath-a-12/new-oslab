alias functionNum R1;
alias currentPID R2;
if(functionNum == ACQUIRE_DISK) then 
	while([DISK_STATUS_TABLE] == 1) do 
		[PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;
	return;
endif;
if(functionNum == ACQUIRE_TERMINAL) then
	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_TERMINAL;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;
endif;
if(functionNum == RELEASE_TERMINAL) then 
	if(currentPID != [TERMINAL_STATUS_TABLE + 1])then
		R0 = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE] = 0;
	alias pID R3;
	R3 = 1;
	while(pID<16) do
		if([PROCESS_TABLE + (16*pID) + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + (16*pID) + 4] = READY;
		endif;
		pID = pID + 1;
	endwhile;
	R0 = 0;
	return;	
endif;

if(functionNum == ACQUIRE_SEMAPHORE) then
    alias ctr R3;
    ctr = 0;
    while(ctr<32) do  
        if([SEMAPHORE_TABLE + ctr*4 + 1] == 0) then
            break;
        endif;
        ctr = ctr + 1;
    endwhile;
    if(ctr == 32) then
        R0 = -1;
        return;
    endif;
    [SEMAPHORE_TABLE + ctr*4 + 1] = 1;
    [SEMAPHORE_TABLE + ctr*4 ] = -1;
    R0 = ctr;
    return;
endif;
if(functionNum == RELEASE_SEMAPHORE) then
    alias sem_table_index R2;
    alias currentPID R3;
    if([SEMAPHORE_TABLE + sem_table_index*4] == currentPID) then
        [SEMAPHORE_TABLE + sem_table_index*4] = -1;
        alias ctr R4;
        ctr = 0;
        while(ctr<16)  do
            if([PROCESS_TABLE + ctr*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + ctr*16 + 5] == sem_table_index ) then
                [PROCESS_TABLE + ctr*16 + 4] = READY;
            endif;
            ctr = ctr + 1;
        endwhile;
    endif;
    [SEMAPHORE_TABLE + sem_table_index*4 + 1] = [SEMAPHORE_TABLE + sem_table_index*4 + 1] -1 ;
    return;
endif;
