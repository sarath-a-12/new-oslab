
alias proc_table_entry R1;
proc_table_entry=PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16);
[proc_table_entry + 13] = SP;
SP = [proc_table_entry + 11] * 512 - 1;

[proc_table_entry + 9] = 8;

multipush(R0,R1);
R1=GET_PCB_ENTRY;
alias childPID R11;
call MOD_1;
childPID=R0;
multipop(R0,R1);

if(childPID==-1) then
	[proc_table_entry + 9] = 0;

	SP = [proc_table_entry + 13];

	[[PTBR + 2 * ((([proc_table_entry + 13]) - 1) / 512)] * 512 + (([proc_table_entry + 13]) - 1) % 512]=-1;

	ireturn;
endif;

if([PTBR+4]==-1) then
	multipush(R0,R1,R11);
	R1=GET_FREE_PAGE;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_2;
	[PTBR+4]=R0;
	[PTBR+5]="1110";
	multipop(R0,R1,R11);

	multipush(R0,R1,R11);
	R1=GET_FREE_PAGE;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_2;
	[PTBR+6]=R0;
	[PTBR+7]="1110";
	multipop(R0,R1,R11);
endif;

multipush(R0,R1);
R1=GET_FREE_PAGE;
R2=childPID;
multipush(R11);
call MOD_2;
multipop(R11);
[PAGE_TABLE_BASE+childPID*20+16]=R0;
[PAGE_TABLE_BASE+20*childPID+17]="0110";
multipop(R0,R1);

multipush(R0,R1);
R1=GET_FREE_PAGE;
R2=childPID;
multipush(R11);
call MOD_2;
multipop(R11);
[PAGE_TABLE_BASE+20*childPID+18]=R0;
[PAGE_TABLE_BASE+20*childPID+19]="0110";
multipop(R0,R1);

multipush(R0,R1);
R1=GET_FREE_PAGE;
R2=childPID;
multipush(R11);
call MOD_2;
multipop(R11);
[PROCESS_TABLE+16*childPID+11]=R0;
multipop(R0,R1);

// initialize process table

[PROCESS_TABLE+16*childPID+3]= [proc_table_entry + 3];
[PROCESS_TABLE+16*childPID+6]= [proc_table_entry + 6];
[PROCESS_TABLE+16*childPID+7]= [proc_table_entry + 7];
[PROCESS_TABLE+16*childPID+10]=[proc_table_entry + 10];
[PROCESS_TABLE+16*childPID+13]=[proc_table_entry + 13];

[PROCESS_TABLE+16*childPID+0]=0;
[PROCESS_TABLE+16*childPID+9]=0;
[PROCESS_TABLE+16*childPID+12]=0;
[PROCESS_TABLE+16*childPID+2]=[SYSTEM_STATUS_TABLE+1];
[PROCESS_TABLE+16*childPID+4]=CREATED;

alias counter R12;
counter=2;

while (counter<10) do 
	[DISK_MAP_TABLE+childPID*10+counter]=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+counter];
	counter=counter+1;
endwhile;

counter=0;

while (counter<16) do 
	[PAGE_TABLE_BASE+childPID*20+counter]=[PTBR+counter];
	if(counter%2==0) then
		[MEMORY_FREE_LIST+[PTBR+counter]]=[MEMORY_FREE_LIST+[PTBR+counter]]+1;
	endif;
	counter=counter+1;
endwhile;

counter=0;
while (counter<512) do 
	[[PAGE_TABLE_BASE+childPID*20+16]*512+counter]=[[PTBR+16]*512+counter];
	[[PAGE_TABLE_BASE+childPID*20+18]*512+counter]=[[PTBR+18]*512+counter];
	counter=counter+1;
endwhile;

[[PROCESS_TABLE + childPID*16 + 11]*512] = BP;

[proc_table_entry + 9] = 0;

SP = [proc_table_entry + 13];

[[PTBR + 2 * ((([proc_table_entry + 13]) - 1) / 512)] * 512 + (([proc_table_entry + 13]) - 1) % 512]=childPID;

[[PAGE_TABLE_BASE+20*childPID + 2 * ((([proc_table_entry + 13]) - 1) / 512)] * 512 + (([proc_table_entry + 13]) - 1) % 512]=0;

alias pprtp R13;
alias pprtc R14;
pprtp=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512+496;
pprtc=[PROCESS_TABLE+16*childPID+11]*512+496;

counter=0;
while(counter<8) do 
	[pprtc+counter*2]=[pprtp+counter*2];
	[pprtc+counter*2+1]=[pprtp+counter*2+1];
	if([pprtp+counter*2]==SEMAPHORE) then
		[SEMAPHORE_TABLE+[pprtp+counter*2+1]*4+1]=[SEMAPHORE_TABLE+[pprtp+counter*2+1]*4+1]+1;
	endif;
	counter=counter+1;
endwhile;
ireturn;



//[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ]*16 + 9] = 8; // fork is executing 
//
//[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
//SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512-1;
//
//R1 = 1;
//call MOD_1;
//if(R0 == -1) then
//    [[PTBR + 2 * ([PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] - 1)/ 512] * 512 + ([PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] - 1) % 512] = -1;
//    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ]*16 + 9] = 0;
//    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13]; 
//    ireturn;
//endif;
//alias newPID R5;
//alias ctr R6;
//newPID = R0;
//if([PTBR + 4] == -1 || [PTBR + 6] == -1) then
//    ctr = 0;
//    while(ctr<2) do 
//        multipush(R5,R6);
//        R1 = 1;
//        call MOD_2;
//        multipop(R5,R6);
//        [PTBR + 2*ctr + 4] = R0;
//        [PTBR + 2*ctr + 5] = "0110";
//        ctr = ctr + 1;
//    endwhile;
//endif;
//ctr = 0;
//while(ctr<3) do
//    multipush(R5,R6);
//    R1 = 1;
//    call MOD_2;
//    multipop(R5,R6);
//    if(ctr<2) then 
//        [PAGE_TABLE_BASE + newPID*20 + 16 + 2*ctr] = R0;
//        [PAGE_TABLE_BASE + newPID*20 + 17 + 2*ctr] = "0110";
//    endif;
//    ctr = ctr + 1;
//endwhile;
//[PROCESS_TABLE + newPID*16 + 11] = R0;
//ctr = 0;
//while(ctr<16) do
//    if(ctr == 3 || ctr == 6 || ctr == 7 || ctr == 10 || ctr == 13) then
//        [PROCESS_TABLE + newPID*16 + ctr] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + ctr];
//    endif;
//    ctr = ctr + 1;
//endwhile;
//[PROCESS_TABLE + newPID*16 + 2] = [SYSTEM_STATUS_TABLE + 1];
//[PROCESS_TABLE + newPID*16] = 0;
//[PROCESS_TABLE + newPID*16 + 4] = CREATED;
//[PROCESS_TABLE + newPID*16 + 9] = 0;
//[PROCESS_TABLE + newPID*16 + 12] = 0; 
//
//ctr = 0;
//alias userAreaPageChild R7;
//userAreaPageChild = [PROCESS_TABLE + newPID*16 + 11]*512;
//alias userAreaPageParent R8;
//userAreaPageParent = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512;
//while(ctr<16) do
//    [userAreaPageChild + RESOURCE_TABLE_OFFSET + ctr] = [userAreaPageParent + RESOURCE_TABLE_OFFSET+ ctr];
//    if([userAreaPageChild + RESOURCE_TABLE_OFFSET + ctr] == 1) then
//        [SEMAPHORE_TABLE + 4*[userAreaPageChild + RESOURCE_TABLE_OFFSET + ctr+1] + 1] = [SEMAPHORE_TABLE + 4*[userAreaPageChild+ RESOURCE_TABLE_OFFSET + ctr+1] + 1] + 1;
//    endif;
//    if([userAreaPageChild + RESOURCE_TABLE_OFFSET + ctr] == 0) then
//        R9 = [userAreaPageParent + RESOURCE_TABLE_OFFSET + ctr + 1];
//        [OPEN_FILE_TABLE + 4*R9 + 1] = [OPEN_FILE_TABLE + 4*R9 + 1] + 1;
//    endif;
//    ctr = ctr + 2;
//endwhile;
//
//ctr = 0;
//while(ctr<16) do
//    [DISK_MAP_TABLE + newPID*10 + ctr] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + ctr];
//    ctr = ctr + 1;
//endwhile;
//
//ctr = 0;
//while(ctr<16) do 
//    [PAGE_TABLE_BASE + newPID*20 + ctr] = [PTBR + ctr];
//    if((ctr%2) == 0) then
//        [MEMORY_FREE_LIST + [PTBR + ctr]] = [MEMORY_FREE_LIST + [PTBR + ctr]] + 1; 
//    endif;
//    ctr = ctr + 1;  //copying the heap code and library pages
//endwhile;
//ctr = 0;
//while(ctr<512) do
//    [[PAGE_TABLE_BASE + newPID*20 + 16]*512 + ctr] = [[PTBR+16]*512 + ctr];
//    ctr = ctr + 1;
//endwhile;
//ctr = 0;
//while(ctr<512) do
//    [[PAGE_TABLE_BASE + newPID*20 + 18]*512 + ctr] = [[PTBR+18]*512 + ctr];
//    ctr = ctr + 1;
//endwhile;
//
//[[PROCESS_TABLE + newPID*16 + 11]*512] = BP;
//[[PTBR + 2 * ([PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] - 1)/ 512] * 512 + ([PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] - 1) % 512] = newPID;
//[[PAGE_TABLE_BASE +newPID*20 + 2 * ([PROCESS_TABLE+newPID*16+13] - 1)/ 512] * 512 + ( [PROCESS_TABLE+newPID*16+13]- 1) % 512] = 0;
//[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ]*16 + 9] = 0; //resetting the mode of Parent
//SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
//ireturn;
//
