alias functionNumber R1;
if(functionNumber == GET_PCB_ENTRY) then
    alias ctr R2;
    ctr = 0;
    while(ctr<16) do
        if([PROCESS_TABLE + ctr*16 + 4]==TERMINATED) then
            break;
        endif;
        ctr = ctr + 1;
    endwhile;
    if(ctr==16) then
        R0 = -1;
        return;
    endif;
    [PROCESS_TABLE + ctr*16 + 1] = ctr; 
    [PROCESS_TABLE + ctr*16 + 4] = ALLOCATED;
    [PROCESS_TABLE + ctr*16 + 14] = PAGE_TABLE_BASE + ctr*20;
    [PROCESS_TABLE + ctr*16 + 15] = 10;
    R0 = ctr;
    return;
endif;
if(functionNumber == FREE_USER_AREA_PAGE) then
	//Free user area page corresponding number -- assume R2 contains the PID
    alias ctr R5;
    alias userAreaPage R6;
    userAreaPage = [PROCESS_TABLE + R2 * 16 + 11]*512;
    ctr = 0;
    while(ctr<8) do
        if([userAreaPage+RESOURCE_TABLE_OFFSET + 2*ctr] == 1) then
            multipush(R1,R2,R5,R6);
            R1 = 7;
            R3 = R2;
            R2 = [userAreaPage+RESOURCE_TABLE_OFFSET + 2*ctr + 1];
            call MOD_0;
            multipop(R1,R2,R5,R6);
        endif;
        ctr = ctr + 1;
    endwhile;
	multipush(R1,R2);
	R1 = 2;
	R2 = [PROCESS_TABLE + (R2)*16 + 11];
	call MOD_2;
	multipop(R1,R2);
	return;
endif;
if(functionNumber == EXIT_PROCESS) then
	//Exit process -- assume R2 contains the PID again
    if([PROCESS_TABLE + R2*16 + 9] != 9) then
        alias ctr R6;
        ctr = 0;
        while(ctr<16) do
            if([PROCESS_TABLE + ctr*16 +4] == WAIT_PROCESS && [PROCESS_TABLE +ctr*16 +5] == R2) then
                [PROCESS_TABLE + ctr*16 +4] = READY;
            endif;
            if([PROCESS_TABLE + ctr*16 +2] == R2) then
                [PROCESS_TABLE + ctr*16 +2] = -1;
            endif;
            ctr = ctr + 1;
        endwhile;
    endif;
	multipush(R1,R2);
	R1 = 4;
	// R2 is the same cause same PID is used here too.
	call MOD_1;
	multipop(R1,R2);
	multipush(R1,R2);
	R1 = 2;
	// R2 is the same cause same PID again.
	call MOD_1;
	multipop(R1,R2);
	[PROCESS_TABLE + (R2)*16 + 4] = TERMINATED;
	return;
endif;
if(functionNumber == FREE_PAGE_TABLE ) then
	//Corresponding to free-page Table -- assume R2 contains the PID
	[PAGE_TABLE_BASE + (R2 * 20) + 0] =  -1;
	[PAGE_TABLE_BASE + (R2 * 20) + 1] =  "0000"; 
	[PAGE_TABLE_BASE + (R2 * 20) + 2] =  -1;
	[PAGE_TABLE_BASE + (R2 * 20) + 3] =  "0000"; //deallocating all library pages

	//Now release all Pages using the Release Page
	alias counter R3;
	counter = 0;
	while(counter<19) do
		if([PAGE_TABLE_BASE + (R2*20)+ counter] != -1) then
			multipush(R0,R1,R2,R3);
			R1 = 2;
			R2 = [PAGE_TABLE_BASE + (R2*20) + counter];
			call MOD_2;
			multipop(R0,R1,R2,R3);
           [PAGE_TABLE_BASE + (R2*20)+ counter] = -1;
           [PAGE_TABLE_BASE + (R2*20)+ counter + 1] = "0000";
		endif;
		counter = counter + 2;
	endwhile;
    alias counter2 R4;
    counter = 2;
    while(counter<10) do 
        if(counter==2 || counter==3 || counter == 8 || counter == 9) then
            if([DISK_MAP_TABLE + (R2)*10 + counter]!= -1) then
                multipush(R0,R1,R2,R3,R4);
                R1 = 4;
                R3 = R2;
                R2 = [DISK_MAP_TABLE + (R3)*10 + counter];
                call MOD_2; //calling release block
                multipop(R0,R1,R2,R3,R4);
            endif;
        endif;
        counter = counter+1;
    endwhile;
    //Now invalidate all entries of the disk map table
    counter = 0;
    while(counter<10) do 
        [DISK_MAP_TABLE + (R2)*10 + counter] = -1;
        counter = counter + 1;
    endwhile;
	return;
endif;

