alias functionNum R1;
alias currentPID R2;
alias terminal_adress R3;
if(functionNum == 2) then
	multipush(R1,R2,R3,R4);
	R1 = ACQUIRE_DISK;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3,R4);	
	[DISK_STATUS_TABLE] = 1; // Status busy for the disk
	[DISK_STATUS_TABLE + 1] = 0; // load operation
	[DISK_STATUS_TABLE + 2] = R3;	
	[DISK_STATUS_TABLE + 3] = R4; //memory and disk pages/blocks
	[DISK_STATUS_TABLE + 4] = currentPID; //PID
	load(R3,R4);
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
	call MOD_5;
endif;

if(R1==TERMINAL_WRITE) then
	//calling acquire terminal
	multipush(R1,R2);
	R1 = ACQUIRE_TERMINAL;
	R2 = currentPID;
	call MOD_0;
	multipop(R0,R1);
	print(R3);
	//calling release terminal
	multipush(R1,R2);
	R1 = RELEASE_TERMINAL;
	R2 = currentPID;
	call MOD_0;
	// save return value in any other register if needed (R0)
	multipop(R1,R2);
	return;
endif;

if(R1==TERMINAL_READ)  then //otherwise its Terminal Read?	
	//calling acquire terminal
	multipush(R1,R2,R3);
	R1 = ACQUIRE_TERMINAL;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	read;	
	[PROCESS_TABLE + (currentPID)*16 + 4] = WAIT_TERMINAL;
	multipush(R1,R2,R3);
	call MOD_5;   //scheduler
	multipop(R1,R2,R3);
	[[PTBR+(R3/512)*2]*512 + R3%512] = [PROCESS_TABLE + currentPID*16 + 8];  //Storing word from input buffer field
	return;
endif;
